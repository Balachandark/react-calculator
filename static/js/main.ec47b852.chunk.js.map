{"version":3,"sources":["App.js","components/KeypadComponent.js","components/ResultComponent.js","serviceWorker.js","index.js"],"names":["App","props","onClick","e","button","target","name","calculate","reset","backspace","console","log","state","result","setState","eval","slice","className","this","Component","KeypadComponent","ResultComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"29CAKMA,I,qBAEJ,aAAYC,OAAQ,IAAD,kLACjB,2VAAMA,QADW,MAQnBC,QAAU,SAAEC,GACV,IAAMC,EAASD,EAAEE,OAAOC,KACT,MAAXF,EACF,MAAKG,YAGc,MAAXH,EACR,MAAKI,QAGa,OAAXJ,EACP,MAAKK,aAGLC,QAAQC,IAAK,MAAKC,MAAMC,QACxBH,QAAQC,IAAKP,GACb,MAAKU,SAAS,CACZD,OAAQ,MAAKD,MAAMC,OAAST,MAzBf,MA8BnBG,UAAY,WACV,IACE,MAAKO,SAAS,CAEZD,QAAUE,KAAM,MAAKH,MAAMC,SAAY,IAAO,KAEhD,MAAMV,GACN,MAAKW,SAAS,CACZD,OAAQ,YAtCK,MA2CnBL,MAAQ,WACN,MAAKM,SAAS,CACZD,OAAQ,MA7CO,MAiDnBJ,UAAY,WACV,MAAKK,SAAS,CACZD,OAAQ,MAAKD,MAAMC,OAAOG,MAAO,GAAI,MAhDvC,MAAKJ,MAAQ,CACXC,OAAQ,IAJO,M,wWAwDjB,OACE,kEAAKI,UAAU,OACb,2DAAC,2DAAD,CAAiBJ,OAAQK,KAAKN,MAAMC,SACpC,2DAAC,2DAAD,CAAiBX,QAASgB,KAAKhB,e,KA7DrBiB,8CAmEHnB,2B,gCCxEf,oBAiCeoB,IA/BS,SAAEnB,GACtB,OACI,yBAAKgB,UAAU,UACX,4BAAQX,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,KAAKJ,QAASD,EAAMC,SAAjC,MACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KAAmD,6BAEnD,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KAAmD,6BAEnD,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KAAmD,6BAEnD,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KAAmD,6BAEnD,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,KACA,4BAAQI,KAAK,IAAIJ,QAASD,EAAMC,SAAhC,QAAmD,gC,6BC5B/D,oBAUemB,IARS,SAAC,GAAgB,IAAdR,EAAa,EAAbA,OACvB,OACI,yBAAKI,UAAU,UACX,2BAAKJ,M,kKCOGS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC5B,EAAA,EAAD,MAAS6B,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ec47b852.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport KeypadComponent from './components/KeypadComponent';\r\nimport ResultComponent from './components/ResultComponent';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props); \r\n\r\n    this.state = {\r\n      result: '',\r\n    }\r\n  }\r\n\r\n  onClick = ( e ) => {\r\n    const button = e.target.name;\r\n    if( button === '=' ) {\r\n      this.calculate()\r\n    }\r\n\r\n    else if(  button === 'C' ) {\r\n      this.reset();\r\n    }\r\n    \r\n    else if( button === 'CE' ) {\r\n      this.backspace();\r\n    }\r\n    else {\r\n      console.log( this.state.result );\r\n      console.log( button );\r\n      this.setState({\r\n        result: this.state.result + button\r\n      })\r\n    }\r\n  }\r\n\r\n  calculate = () => {\r\n    try {\r\n      this.setState({\r\n        // eslint-disable-next-line.\r\n        result: ( eval( this.state.result ) || '' ) + ''\r\n      })\r\n    } catch(e) {\r\n      this.setState({\r\n        result: 'error'\r\n      })\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      result: ''\r\n    })\r\n  }\r\n\r\n  backspace = () => {\r\n    this.setState({\r\n      result: this.state.result.slice( 0, -1 )\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <ResultComponent result={this.state.result}/>\r\n        <KeypadComponent onClick={this.onClick}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\n\r\nconst KeypadComponent = ( props ) => {\r\n    return (\r\n        <div className=\"button\">\r\n            <button name=\"(\" onClick={props.onClick}>(</button>\r\n            <button name=\"CE\" onClick={props.onClick}>CE</button>\r\n            <button name=\")\" onClick={props.onClick}>)</button>\r\n            <button name=\"C\" onClick={props.onClick}>C</button><br/>\r\n\r\n            <button name=\"1\" onClick={props.onClick}>1</button>\r\n            <button name=\"2\" onClick={props.onClick}>2</button>\r\n            <button name=\"3\" onClick={props.onClick}>3</button>\r\n            <button name=\"+\" onClick={props.onClick}>+</button><br/>\r\n\r\n            <button name=\"4\" onClick={props.onClick}>4</button>\r\n            <button name=\"5\" onClick={props.onClick}>5</button>\r\n            <button name=\"6\" onClick={props.onClick}>6</button>\r\n            <button name=\"-\" onClick={props.onClick}>-</button><br/>\r\n\r\n            <button name=\"7\" onClick={props.onClick}>7</button>\r\n            <button name=\"8\" onClick={props.onClick}>8</button>\r\n            <button name=\"9\" onClick={props.onClick}>9</button>\r\n            <button name=\"*\" onClick={props.onClick}>x</button><br/>\r\n\r\n            <button name=\".\" onClick={props.onClick}>.</button>\r\n            <button name=\"0\" onClick={props.onClick}>0</button>\r\n            <button name=\"=\" onClick={props.onClick}>=</button>\r\n            <button name=\"/\" onClick={props.onClick}>รท</button><br/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KeypadComponent;","import React from 'react';\r\n\r\nconst ResultComponent = ( {result} ) => {\r\n    return (\r\n        <div className=\"result\">\r\n            <p>{ result }</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}