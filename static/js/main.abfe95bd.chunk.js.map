{"version":3,"sources":["App.js","components/KeypadComponent.js","components/ResultComponent.js","serviceWorker.js","index.js"],"names":["App","props","onClick","button","calculate","reset","backspace","setState","result","state","eval","e","slice","className","this","Component","KeypadComponent","name","target","ResultComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abfe95bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport KeypadComponent from './components/KeypadComponent';\nimport ResultComponent from './components/ResultComponent';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props); \n\n    this.state = {\n      result: '',\n    }\n  }\n\n  onClick = ( button ) => {\n    if( button === '=' ) {\n      this.calculate()\n    }\n\n    else if(  button === 'C' ) {\n      this.reset();\n    }\n    \n    else if( button === 'CE' ) {\n      this.backspace();\n    }\n    else {\n      this.setState({\n        result: this.state.result + button\n      })\n    }\n  }\n\n  calculate = () => {\n    try {\n      this.setState({\n        result: ( eval( this.state.result ) || '' ) + ''\n      })\n    } catch(e) {\n      this.setState({\n        result: 'error'\n      })\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      result: ''\n    })\n  }\n\n  backspace = () => {\n    this.setState({\n      result: this.state.result.slice( 0, -1 )\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <ResultComponent result={this.state.result}/>\n        <KeypadComponent onClick={this.onClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\nclass KeypadComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"button\">\r\n                <button name=\"(\" onClick={e => this.props.onClick(e.target.name)}>(</button>\r\n                <button name=\"CE\" onClick={e => this.props.onClick(e.target.name)}>CE</button>\r\n                <button name=\")\" onClick={e => this.props.onClick(e.target.name)}>)</button>\r\n                <button name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</button><br/>\r\n\r\n\r\n                <button name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</button>\r\n                <button name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</button>\r\n                <button name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</button>\r\n                <button name=\"+\" onClick={e => this.props.onClick(e.target.name)}>+</button><br/>\r\n\r\n\r\n                <button name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</button>\r\n                <button name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</button>\r\n                <button name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</button>\r\n                <button name=\"-\" onClick={e => this.props.onClick(e.target.name)}>-</button><br/>\r\n\r\n                <button name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</button>\r\n                <button name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</button>\r\n                <button name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</button>\r\n                <button name=\"*\" onClick={e => this.props.onClick(e.target.name)}>x</button><br/>\r\n\r\n\r\n                <button name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</button>\r\n                <button name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</button>\r\n                <button name=\"=\" onClick={e => this.props.onClick(e.target.name)}>=</button>\r\n                <button name=\"/\" onClick={e => this.props.onClick(e.target.name)}>รท</button><br/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default KeypadComponent;","import React, { Component } from 'react';\r\n\r\nclass ResultComponent extends Component {\r\n    render() {\r\n        const { result } = this.props;\r\n        return (\r\n            <div className=\"result\">\r\n                <p>{ result }</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}